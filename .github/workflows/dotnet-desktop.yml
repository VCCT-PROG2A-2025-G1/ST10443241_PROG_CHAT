# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Framework 4.8 CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-and-test:
    runs-on: windows-latest  # .NET Framework requires Windows

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Install .NET 4.8 Runtime (not SDK)
    - name: Install .NET Framework 4.8
      run: |
        choco install dotnetfx --version=4.8.0.20190930 -y --no-progress
        # Alternative if Chocolatey fails:
        # Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/?linkid=2088631" -OutFile "$env:RUNNER_TEMP\ndp48-web.exe"
        # Start-Process -Wait -FilePath "$env:RUNNER_TEMP\ndp48-web.exe" -ArgumentList "/q /norestart"

    # Set up MSBuild from Visual Studio
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1

    # Restore NuGet packages (legacy packages.config style)
    - name: Restore NuGet packages
      run: |
        nuget restore
        # If using PackageReference instead of packages.config:
        # msbuild /t:restore

    # Verify Resources folder (from your original workflow)
    - name: Check Resources
      run: |
        if (-not (Test-Path -Path "PROG6221ChatBot/Resources/Test File.wav")) {
          Write-Error "Sound file not found!"
          exit 1
        }

    # Build with MSBuild
    - name: Build Solution
      run: |
        msbuild /p:Configuration=Release /p:Platform="Any CPU" /p:RestorePackages=false
        
        # For parallel builds (faster but less verbose):
        # msbuild /m /p:Configuration=Release /p:Platform="Any CPU" /clp:Summary

    # Run tests (if using MSTest)
    - name: Run Tests
      run: |
        vstest.console.exe "**/bin/Release/*.UnitTests.dll"
        # Alternative for NUnit:
        # nunit3-console "**/bin/Release/*.Tests.dll"
